/***********************************************************************************************
 *
 * MATLAB:  mem1 = Detection1(A);
 * 
 * 
 *
 *  Stefan Schulte (stefan.schulte@Ugent.be)
 *  Last modified: 30/05/06
 *
 ************************************************************************************************/

#include "mex.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
//   printf("\t%d %s %f %s %c\n", x, str, pi, "WOW", c);


double LARGE (double x, double p1, double p2) {
   double res = 0.0;
   if ((x > p1) && (x < p2))   res = (x-p1)/(p2-p1);
   else if (x > p2)            res = 1.0;
   else                        res = 0.0;
   return res;
}

double absol(double a) {
   double b;
   if(a<0)   b=-a;
   else   b=a;
   return b;
}

/**************************************************************************************
*  The main function for the calculation of the shrinkage method
*
***************************************************************************************/


void callMem(double **A1,double *mem1,int M, int N,int W) { 
   int i,j,k,l;   
   double *med, *histo;
   double som, tel, hlp;
   double a = 80.0, b = 160.0;

   int rand1a = 0;
   int rand1b = 0;
   int rand2a = 0;
   int rand2b = 0;
   
   
   xy[0][0] = -1; xy[0][1] = -1; xy[1][0] = -1; xy[1][1] = 0; 
   xy[2][0] = -1; xy[2][1] =  1; xy[3][0] =  0; xy[3][1] = -1; 
   xy[4][0] =  0; xy[4][1] =  0; xy[5][0] =  0; xy[5][1] = 1; 
   xy[6][0] =  1; xy[6][1] = -1; xy[7][0] =  1; xy[7][1] = 0; 
   xy[8][0] =  1; xy[8][1] =  1; 

   adj[0][0] = 1; adj[0][1] = -1; adj[1][0] =  0; adj[1][1] = -1; 
   adj[2][0] = 1; adj[2][1] =  1; adj[3][0] =  1; adj[3][1] =  0; 
   adj[4][0] = 0; adj[4][1] =  0; adj[5][0] =  1; adj[5][1] =  0; 
   adj[6][0] = 1; adj[6][1] =  1; adj[7][0] =  0; adj[7][1] = -1; 
   adj[8][0] = 1; adj[8][1] = -1; 
               
   med = malloc(8*sizeof(double));
   histo = malloc(256*sizeof(double));
      
      
      
   for(i=2; i<M-2; i++){
      for(j=2; j<N-2; j++){
         //--------------------------------------------
         //       Gradient values method
         //--------------------------------------------

         for (k = 0; k<9; k++){
            if (k==4) continue;
            diff1 = A1[i+xy[k][1]][j+xy[k][0]] - A1[i][j];
            diff2 = A1[i+xy[k][1]+adj[k][1]][j+xy[k][0]+adj[k][0]] - A1[i+adj[k][1]][j+adj[k][0]];
            diff3 = A1[i+xy[k][1]-adj[k][1]][j+xy[k][0]-adj[k][0]] - A1[i-adj[k][1]][j-adj[k][0]];
            
            l1 = LARGE(absol(diff1),a,b);
            l2 = LARGE(absol(diff2),a,b);
            l3 = LARGE(absol(diff3),a,b);
            
/*            pos1 = POS(diff1,c,d);
            neg1 = POS(-diff1,c,d);
            
            pos2 = POS(diff2,c,d);
            neg2 = POS(-diff2,c,d);

            pos3 = POS(diff3,c,d);
            neg3 = POS(-diff3,c,d);
*/


            if(((diff1 < -5) && (diff2>5) && (diff3>5)) || ((diff1 >5) && (diff2<-55) && (diff3<-5))){
               if((l1>=l2)&&(l1>=l3)) res = l1;
               else if ((l2>=l1)&&(l2>=l3)) res = l2;
               else res = l3;
            }

            else if((LARGE(absol(l1-l2),a/255.0, b/255.0) > 0) && (LARGE(absol(l1-l3),a/255.0, b/255.0) > 0) && ((l1-l2)*(l1-l3)>0)){
               if((l1>=l2)&&(l1>=l3)) res = l1;
               else if ((l2>=l1)&&(l2>=l3)) res = l2;
               else res = l3;
            }
            else res = 0;
            
            tel = 0;
            for (loop = 0; loop<tel; loop++){
                if (res<med[loop]){
                   hlp = med[loop];
                   med[loop] = res;
                   res = hlp;
                }
            }
            med[tel] = res;
            tel++;
         }
         
         if ((med[3]+med[4])/2 >= 0.5) histo[A1[i][j]]++;
      }
   }
   
   for (i=0; i<256; i++) sort[i] = res[i];

   for (i=0; i<256; i++) 
      for (j=i+1; j<256; j++)
         if(sort[j]>sort[i]){
            tmp = sort[j];
            sort[j] = sort[i];
            sort[i] = tmp;
         }
   
   for (j = 0; j<10; j++)
      for (i = 0; i<256; i++){
         if (j==0) som += res[i];
         if()
      }
   
   
   
   
   
   
   
   
         
       
   for(i=0; i<M; i++){
      for(j=0; j<N; j++){
         /* step 1. Determine the local window*/      
         if(i < W) {
            rand1a = i;
            rand1b = W;
         }
         else {
              if (i>M-W-1){
               rand1a = W;
               rand1b = M-i-1;
            }
            else{
               rand1a = W;
               rand1b = W;
            }
         }

         
         if(j < W) {
            rand2a = j;
            rand2b = W;
         }
         else {
            if (j > N-W-1){
               rand2a = W;
               rand2b = N-j-1;
            }
            else{
               rand2a = W;
               rand2b = W;
            }
         }
         /* end step 1. */      
         
        
         
         /* step 2. Calculation of the membership degrees */      
        
         //--------------------------------------------
         //       detection method
         //--------------------------------------------

         som = 0.0; tel = 0.0;
         min = 25555;
         for (k = i-rand1a; k<=i+rand1b; k++){
	        for (l = j-rand2a; l<=j+rand2b; l++){
	           if (min > gem[k][l]) min = gem[k][l];
	           som +=  gem[k][l];
               tel += 1;
            }
         }
         p = som/tel;
         hlp = absol(gem[i][j]-p);
         mem1[i+j*M] = LARGE(hlp, min, 1.2*min);         
      }   
   }         
}  /* End of callFuzzyShrink */


#define Im1      prhs[0]
#define WSIZE    prhs[1]

#define Mem1 plhs[0]



/**
*  The interaction with Matlab (mex):
*        nlhs = amount of output arguments (= 1)
*        nrhs = amount of input arguments (= 3)
*     *plhs[] = link to the output 
*     *prhs[] = link to the input 
*
**/
void mexFunction( int nlhs, mxArray  *plhs[], int nrhs, const mxArray  *prhs[] ) {
    int row, col, i, M, N, K, W;
    double **mem1, **A1;
    
    if (nlhs!=1)
        mexErrMsgTxt("It requires three output arguments only [M1].");
    if (nrhs!=2)
       mexErrMsgTxt("this method requires 4 input argument [Im1 Wsize]");

    /* Get input values */  
    M = mxGetM(Im1);
    N = mxGetN(Im1);
    W = mxGetScalar(WSIZE);

    /**
    * Allocate memory for return matrices 
    **/
    Mem1 = mxCreateDoubleMatrix(M, N, mxREAL);  
    mem1 = mxGetPr(Mem1);

    /**
    * Dynamic allocation of memory for the input array
    **/
    A1 = malloc(M*sizeof(int));
    for(i=0;i<M;i++)
      A1[i] = malloc(N*sizeof(double));

     /**
     * Convert ARRAY_IN and INPUT_MASK to 2x2 C arrays (MATLAB stores a two-dimensional matrix 
     * in memory as a one-dimensional array) 
     ***/
     for (col=0; col < N; col++)
         for (row=0; row < M; row++) {
             A1[row][col] = (mxGetPr(Im1))[row+col*M];
	      }
	      
	      
    /* Call callFuzzyShrink function */ 
    callMem(A1,mem1,M,N,W);

    for(i=0;i<M;i++)  free(A1[i]);
    free(A1); 
}
/* end mexFcn*/